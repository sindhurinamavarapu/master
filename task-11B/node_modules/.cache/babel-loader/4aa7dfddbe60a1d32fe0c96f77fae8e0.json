{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import moment from \"moment\";\n// //slice\n// const holidaySlice = createSlice({\n//     name: \"holidayList\",\n//     initialState: {\n//        holidayData: [],\n//        holidayList:{}\n//      },\n//     reducers: {\n//         getHolidays(state, action) {\n//             state.holidayData = action.payload;\n//         },\n//         setHolidays(state,action){\n//             state.holidayList = action.payload;\n//         },\n//         setForID(state,action){\n//             console.log(\"action.payload\",action)\n//             state.dataforId =action.payload;\n//         }\n//     }\n// });\n// export const { getHolidays,setHolidays,setForID} = holidaySlice.actions;\n// //Actions\n// export const fetchUsers = (year) => async (dispatch) => {\n//     if (typeof year === \"undefined\") {\n//         year = moment().year();\n//     }\n//     axios.get(`http://localhost:4000/holiday/year/${year}`).then((res) => {\n//         dispatch(getHolidays(res.data));\n//     });\n// };\n// //  //post \n//  export const addTodo = (holiday) => async(dispatch) => {\n//       console.log(\"holiday\",holiday);\n//         axios.post(`http://localhost:4000/holiday`,holiday).then((res) =>{\n//             // console.log(\"sindu\",res.data)\n//            dispatch(addTodo(res.data))\n//         })\n//     };\n// // //read the data\n//  export const readTodo = (id )=> async(dispatch) => {\n//     console.log(\"hi\")\n//             axios.get(`http://localhost:4000/holiday/${id}`).then((res) => {\n//             console.log(\"read\",res);\n//              dispatch(setForID(res.data))\n//         })  \n//      } \n//  //update\n//  export const updateTodo =(updatedTodo,id) =>async(dispatch) =>{\n//      axios.put(`http://localhost:4000/holiday/${id}`,updatedTodo).then((res) =>{\n//          dispatch(updateTodo(res.data))\n//      })\n//  } \n//  //delete\n//  export const deleteTodo =(id) =>async(dispatch) =>  {\n//      axios.delete(`http://localhost:4000/holiday/${id}`).then((res) =>{\n//          dispatch(setForID(res.data))\n//      })\n//  }\n// export const holidayListSliceState = (state) => state.holidaySlice.holidayData;\n// //  export const holidayListSliceState1=(state) =>state.holidaySlice.dataforId;\n// export default holidaySlice.reducer;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nconst currentYear = moment().format(\"YYYY\");\nconst today = parseInt(currentYear);\nconst initialState = {\n  year: today,\n  holidays: [],\n  dataforId: {\n    id: \"\",\n    location: \"\",\n    type: \"\",\n    date: \"\",\n    description: \"\"\n  }\n}; //slice\n\nconst holidaySlice = createSlice({\n  name: \"holidays\",\n  initialState,\n  reducers: {\n    getHolidays(state, action) {\n      state.year = action.payload;\n    },\n\n    setHolidays(state, action) {\n      state.holidays = action.payload;\n    },\n\n    setForID(state, action) {\n      console.log(\"action.payload\", action);\n      state.dataforId = action.payload;\n    } // setStatus(state,action){\n    //    state.status.msg=action.payload.msg;\n    //    state.status.color=action.payload.color;\n    // }\n\n\n  }\n});\nexport const {\n  getHolidays,\n  setHolidays,\n  setForID\n} = holidaySlice.actions; //Actions\n\nexport const fetchUsers = year => async dispatch => {\n  if (typeof year === \"undefined\") {\n    year = moment().year();\n  }\n\n  axios.get(`http://localhost:4000/holiday/year/${year}`).then(res => {\n    dispatch(setholidays(res.data.Data));\n    console.log(\"data\", res.data.Data);\n    dispatch(getHolidays(year));\n    dispatch(setId({\n      id: \"\",\n      location: \"ALL\",\n      type: \"F\",\n      date: \"\",\n      description: \"\"\n    }));\n    dispatch(setStatus({\n      msg: \"\",\n      color: \"\"\n    }));\n  }).catch(error => {\n    dispatch(setHolidays([]));\n    dispatch(getHolidays(year));\n  });\n}; //post \n\nexport const addTodo = dataForId => async dispatch => {\n  axios.post(`http://localhost:4000/holiday`, JSON.stringify(dataForId)).then(res => {\n    let status = {\n      msg: \"Record inserted Succesfully\",\n      color: \"green\"\n    };\n    dispatch(addTodo(res.data));\n  });\n}; // //read the data\n\nexport const readTodo = id => async dispatch => {\n  axios.get(`http://localhost:4000/holiday/${id}`).then(res => {\n    dispatch(setForID(res.data.Data));\n  }).catch(error => {\n    let status = {\n      msg: \"Record not there for this particular id.\",\n      color: \"red\"\n    };\n    dispatch(setStatus(status));\n  });\n}; //update\n\nexport const updateTodo = (id, dataForId) => async dispatch => {\n  axios.put(`http://localhost:4000/holiday/${id}`, JSON.stringify(dataForId)).then(res => {\n    let status = {\n      msg: \"record updated Successfully\",\n      color: \"green\"\n    };\n    dispatch(setStatus(status));\n  }).catch(error => {\n    let status = {\n      msg: \"Duplicate data found\",\n      color: \"red\"\n    };\n    dispatch(setStatus(status));\n  });\n}; //delete\n\nexport const deleteTodo = (id, year) => async dispatch => {\n  axios.delete(`http://localhost:4000/holiday/${id}`).then(res => {\n    dispatch(getHolidays(year));\n  }).catch(error => {\n    let status = {\n      msg: \"Data not deleted successfully\",\n      color: \"red\"\n    };\n    dispatch(setStatus(status));\n  });\n};\nexport const holidayListSliceState = state => state.holidaySlice.holidayData;\nexport default holidaySlice.reducer;","map":{"version":3,"sources":["/Users/sindhurin/development/quadacademy/task-11B/src/slice/holidaySlice.js"],"names":["createSlice","axios","moment","currentYear","format","today","parseInt","initialState","year","holidays","dataforId","id","location","type","date","description","holidaySlice","name","reducers","getHolidays","state","action","payload","setHolidays","setForID","console","log","actions","fetchUsers","dispatch","get","then","res","setholidays","data","Data","setId","setStatus","msg","color","catch","error","addTodo","dataForId","post","JSON","stringify","status","readTodo","updateTodo","put","deleteTodo","delete","holidayListSliceState","holidayData","reducer"],"mappings":"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","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\n// import axios from \"axios\";\n// import moment from \"moment\";\n\n\n// //slice\n// const holidaySlice = createSlice({\n//     name: \"holidayList\",\n//     initialState: {\n//        holidayData: [],\n//        holidayList:{}\n//      },\n//     reducers: {\n//         getHolidays(state, action) {\n//             state.holidayData = action.payload;\n//         },\n//         setHolidays(state,action){\n          \n//             state.holidayList = action.payload;\n//         },\n//         setForID(state,action){\n//             console.log(\"action.payload\",action)\n//             state.dataforId =action.payload;\n//         }\n//     }\n// });\n\n// export const { getHolidays,setHolidays,setForID} = holidaySlice.actions;\n\n\n// //Actions\n// export const fetchUsers = (year) => async (dispatch) => {\n    \n//     if (typeof year === \"undefined\") {\n//         year = moment().year();\n//     }\n//     axios.get(`http://localhost:4000/holiday/year/${year}`).then((res) => {\n//         dispatch(getHolidays(res.data));\n       \n//     });\n    \n// };\n// //  //post \n//  export const addTodo = (holiday) => async(dispatch) => {\n//       console.log(\"holiday\",holiday);\n    \n//         axios.post(`http://localhost:4000/holiday`,holiday).then((res) =>{\n//             // console.log(\"sindu\",res.data)\n//            dispatch(addTodo(res.data))\n        \n//         })\n       \n//     };\n\n// // //read the data\n\n//  export const readTodo = (id )=> async(dispatch) => {\n     \n//     console.log(\"hi\")\n//             axios.get(`http://localhost:4000/holiday/${id}`).then((res) => {\n//             console.log(\"read\",res);\n//              dispatch(setForID(res.data))\n//         })  \n//      } \n    \n//  //update\n//  export const updateTodo =(updatedTodo,id) =>async(dispatch) =>{\n//      axios.put(`http://localhost:4000/holiday/${id}`,updatedTodo).then((res) =>{\n//          dispatch(updateTodo(res.data))\n//      })\n//  } \n//  //delete\n//  export const deleteTodo =(id) =>async(dispatch) =>  {\n//      axios.delete(`http://localhost:4000/holiday/${id}`).then((res) =>{\n//          dispatch(setForID(res.data))\n//      })\n//  }\n\n\n\n// export const holidayListSliceState = (state) => state.holidaySlice.holidayData;\n// //  export const holidayListSliceState1=(state) =>state.holidaySlice.dataforId;\n// export default holidaySlice.reducer;\n\n\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nconst currentYear = moment().format(\"YYYY\");\nconst today = parseInt(currentYear);\nconst initialState={\n    year:today,\n    holidays:[],\n    dataforId:{\n        id:\"\",\n        location:\"\",\n        type:\"\",\n        date:\"\",\n        description:\"\"\n    }\n};\n//slice\nconst holidaySlice = createSlice({\n    name: \"holidays\",\n    initialState,\n    reducers: {\n        getHolidays(state, action) {\n            state.year = action.payload;\n        },\n        setHolidays(state,action){\n          state.holidays = action.payload;\n        },\n        setForID(state,action){\n            console.log(\"action.payload\",action)\n            state.dataforId =action.payload;\n        },\n        // setStatus(state,action){\n        //    state.status.msg=action.payload.msg;\n        //    state.status.color=action.payload.color;\n        // }\n    }\n});\n\nexport const { getHolidays,setHolidays,setForID} = holidaySlice.actions;\n\n\n//Actions\nexport const fetchUsers = (year) => async (dispatch) => {\n    \n    if (typeof year === \"undefined\") {\n        year = moment().year();\n    }\n    axios.get(`http://localhost:4000/holiday/year/${year}`).then((res) => {\n        dispatch(setholidays(res.data.Data));\n        console.log(\"data\",res.data.Data);\n        dispatch(getHolidays(year));\n        dispatch(\n            setId({\n                id:\"\",\n                location:\"ALL\",\n                type:\"F\",\n                date:\"\",\n                description:\"\",\n            })\n        );\n        dispatch(setStatus({msg:\"\",color:\"\"}));\n    })\n    .catch((error) =>{\n        dispatch(setHolidays([]));\n        dispatch(getHolidays(year));\n    })\n    \n};\n\n //post \nexport const addTodo = (dataForId) => async(dispatch) => {\n    \n   axios.post(`http://localhost:4000/holiday`,JSON.stringify(dataForId)).then((res) =>{\n          let status={\n              msg:\"Record inserted Succesfully\",\n              color:\"green\"\n          }\n         dispatch(addTodo(res.data))\n      \n      })\n     \n  };\n\n// //read the data\n\n export const readTodo = (id )=> async(dispatch) => {\n            axios.get(`http://localhost:4000/holiday/${id}`).then((res) => {\n             dispatch(setForID(res.data.Data))\n        })  \n        .catch((error)=>{\n            let status ={\n                msg:\"Record not there for this particular id.\",\n                color:\"red\",\n            }\n            dispatch(setStatus(status));\n        })\n     }; \n\n     \n    \n //update\n export const updateTodo =(id,dataForId) =>async(dispatch) =>{\n     axios.put(`http://localhost:4000/holiday/${id}`,JSON.stringify(dataForId)).then((res) =>{\n         let status={\n             msg:\"record updated Successfully\",\n             color:\"green\"\n         }\n         dispatch(setStatus(status));\n     })\n     .catch((error)=>{\n         let status={\n             msg:\"Duplicate data found\",\n             color:\"red\",\n         };\n         dispatch(setStatus(status));\n     });\n } \n //delete\n export const deleteTodo =(id,year) =>async(dispatch) =>  {\n     axios.delete(`http://localhost:4000/holiday/${id}`).then((res) =>{\n         dispatch(getHolidays(year));\n     })\n     .catch((error)=>{\n         let status={\n             msg:\"Data not deleted successfully\",\n             color:\"red\"\n         };\n         dispatch(setStatus(status));\n     });\n };\n\n export const holidayListSliceState = (state) => state.holidaySlice.holidayData;\n\n\nexport default holidaySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}