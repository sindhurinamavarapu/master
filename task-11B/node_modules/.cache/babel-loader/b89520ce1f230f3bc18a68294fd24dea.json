{"ast":null,"code":"var _jsxFileName = \"/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Link from \"@material-ui/core/Link\";\nimport { addTodo, readTodo } from '../slice/holidaySlice';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { holidayListSliceState } from \"../slice/holidaySlice\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst actions = type => {\n  let Button = \"\";\n\n  switch (type) {\n    case \"ADD\":\n      Button = \"Save\";\n      break;\n\n    case \"Read\":\n      Button = \"Switch to Update\";\n      break;\n\n    case \"UPDATE\":\n      Button = \"Delete && Switch to View && Save\";\n      break;\n\n    default:\n      Button = \"Goto Holidays\";\n  }\n\n  return Button;\n};\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  root: {\n    justifyContent: 'center',\n    pb: '3'\n  },\n  inputLabel: {\n    paddingLeft: '30%'\n  },\n  textField: {\n    margin: '7'\n  }\n}));\nconst type = [{\n  label: 'Select'\n}, {\n  label: 'Optional'\n}, {\n  label: 'Fixed'\n}];\nconst location = [{\n  label: 'Select'\n}, {\n  label: 'All Locations'\n}, {\n  label: 'Bettendorf,IA'\n}, {\n  label: 'India'\n}];\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 1,\n  style: {\n    width: '65rem',\n    height: '35rem'\n  }\n};\n\nfunction BlogPost() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: \"50px\"\n    },\n    children: [\"Now showing post \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n}\n\n_s(BlogPost, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n\n_c = BlogPost;\nexport default function App() {\n  _s2();\n\n  const classes = useStyles();\n  const currentYear = moment().format(\"YYYY\");\n  const today = parseInt(currentYear);\n  const dispatch = useDispatch();\n  const holidayId = useSelector(state => state.holidaySlice.holidayId);\n  const holidays = useSelector(holidayListSliceState);\n  console.log(holidays, \"holidays\"); //  const [isSave,setIsSave]= useState[1];\n  //  const [isread,setIsRead]=useState[0];\n  //for getting the data\n\n  const state = useSelector(state => state);\n  let {\n    id\n  } = useParams();\n  console.log({\n    id\n  }); // useEffect(()=>{\n  //   dispatch(readTodo(id))\n  // },[id])\n\n  const [todo, setTodo] = useState({\n    date: \"\",\n    description: \"\",\n    type: \"\",\n    location: \"\",\n    isComplete: false\n  });\n  const formik = useFormik({\n    initialValues: {\n      date: '',\n      location: '',\n      type: '',\n      description: '',\n      isComplete: false\n    },\n    validationSchema: Yup.object({\n      date: Yup.string().required(\"Required!\"),\n      location: Yup.string().required(\"Required!\").nullable(),\n      type: Yup.string().required(\"Required!\").nullable(),\n      description: Yup.string().required(\"Required!\").nullable()\n    }),\n    onSubmit: values => {\n      console.log(values);\n      dispatch(addTodo(values)); //update the state\n      // setTodo({\n      //   date:\"\",\n      //   description:\"\",\n      //   type:\"\",\n      //   location:\"\",\n      //   isComplete:false\n      // })\n      //  alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return (\n    /*#__PURE__*/\n    // <div>\n    // // <form  onSubmit={formik.handleSubmit}>\n    // //             <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n    // //                       <Grid container spacing={3}>\n    // //                         <Grid item xs={2}>\n    // //                           <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n    // //                         </Grid>\n    // //                         <Grid item xs={10}>\n    // //                           <TextField\n    //                           name=\"HolidayId\"\n    //                             id=\"outlined-full-width\"\n    //                             value=\"#\"\n    //                             style={{ margin: 1 }}\n    //                             fullWidth\n    //                             margin=\"normal\"\n    //                             InputLabelProps={{\n    //                               shrink: true,\n    //                             }}\n    //                             variant=\"outlined\"\n    //                           />\n    //                         </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                          <TextField\n    //                           id=\"date\"\n    //                           name=\"date\"\n    //                           type=\"date\"\n    //                           onChange={formik.handleChange}\n    //                            value={formik.values.date}\n    //                           style={{ margin: 1 }}\n    //                           format=\"MM/dd/yyyy\"\n    //                           fullWidth\n    //                           margin=\"normal\"\n    //                           InputLabelProps={{\n    //                             shrink: true,\n    //                           }}\n    //                           variant=\"outlined\"\n    //                         />\n    //                         {formik.errors.date && formik.touched.date && (\n    //                           <p>{formik.errors.date}</p>\n    //                         )}\n    //                        </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"location\"\n    //                             name=\"location\"\n    //                             type=\"text\"\n    //                            onChange={formik.handleChange}\n    //                             value={formik.values.location}\n    //                             select\n    //                             SelectProps={{\n    //                               native: true,\n    //                             }}\n    //                             style={{ marginRight: 1 }}\n    //                             variant=\"filled\"\n    //                             fullWidth\n    //                           >\n    //                             {location.map((option) => (\n    //                               <option key={option.value} value={option.value}>\n    //                                 {option.label}\n    //                               </option>\n    //                             ))}\n    //                           </TextField><br></br>\n    //                           {formik.errors.location && formik.touched.location && (\n    //                             <p>{formik.errors.location}</p>\n    //                           )}\n    //                         </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"type\"\n    //                             name=\"type\"\n    //                             type=\"text\"\n    //                            onChange={formik.handleChange}\n    //                            value={formik.values.type}\n    //                             select\n    //                             style={{ marginRight: 1 }}\n    //                             SelectProps={{\n    //                               native: true,\n    //                             }}\n    //                             variant=\"filled\"\n    //                             fullWidth\n    //                           >\n    //                             {type.map((option) => (\n    //                               <option key={option.value} value={option.value}>\n    //                                 {option.label}\n    //                               </option>\n    //                             ))}\n    //                           </TextField>\n    //                           {formik.errors.type && formik.touched.type&& (\n    //                             <p>{formik.errors.type}</p>\n    //                           )}\n    //                         </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"description\"\n    //                             name=\"description\"\n    //                             type=\"text\"\n    //                             onChange={formik.handleChange}\n    //                             values={formik.values.description}\n    //                             style={{ marginRight: 1 }}\n    //                             fullWidth\n    //                             margin=\"normal\"\n    //                             InputLabelProps={{\n    //                               shrink: true,\n    //                             }}\n    //                             variant=\"outlined\"\n    //                           />\n    //                           {formik.errors.description && formik.touched.description && (\n    //                             <p>{formik.errors.description}</p>\n    //                           )}\n    //                         </Grid>\n    //                         <Grid item xs={12} sm={12} md={4} lg={4}\n    //                           style={{\n    //                             textAlign: 'center'\n    //                           }}\n    //                         >\n    //                           <Button>\n    //                           </Button>\n    //                         </Grid>\n    //                         <Link href='/holiday'>\n    //                           <Button\n    //                             variant=\"contained\"\n    //                             color=\"primary\"\n    //                             style={{ margin: '2 auto', display: \"flex\" }}\n    //                             type=\"submit\"\n    //                             startIcon={<SaveIcon />}\n    //                           >\n    //                             Save\n    //                           </Button>\n    //                         </Link>\n    //                         <Link href='/'>\n    //                           <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n    //                           </Link>\n    //                       {/* <Link href='/holiday/:id?type=\"read\"'>\n    //                       //  {actionType=\"read\" && (\n    //                       //     <Button variant=\"contained\"  color=\"primary\" style={{ margin: '3 auto', display: \"flex\" }}>Switch To update</Button>\n    //                       //      <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n    //                       //     </Link>\n    //                         <Link href='/holiday/:id?type=\"update\"'>\n    //                        <Button\n    //                       //     variant=\"contained\"\n    //                       //     color=\"secondary\"\n    //                       //     startIcon={<DeleteIcon />}\n    //                       //       >\n    //                       //      Delete\n    //                       //    </Button>\n    //                       //    </Link>\n    //                       //   <Link href='/holiday/:id?type=\"update\"'>\n    //                       //     <Button variant=\"contained\" color=\"primary\" style={{ margin: '3 auto', display: \"flex\"}}>Switch to view</Button>\n    //                         //   </Link> */}\n    //                      </Grid>\n    //                </Box>\n    //               </form>\n    //               </div>\n    _jsxDEV(\"ul\", {\n      id: \"todo\",\n      children: this.state.items.map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item\",\n        \"data-id\": item.id,\n        children: [item.name, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.yourfunc(item.id),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 7\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(App, \"v0VuXzwyWMzgvM5zZjvrTTBVwxM=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector, useParams, useFormik];\n});\n\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BlogPost\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js"],"names":["React","useEffect","useState","useFormik","useParams","Yup","makeStyles","Grid","Box","TextField","InputLabel","Button","SaveIcon","DeleteIcon","Link","addTodo","readTodo","useDispatch","useSelector","moment","holidayListSliceState","render","actions","type","useStyles","theme","button","margin","spacing","root","justifyContent","pb","inputLabel","paddingLeft","textField","label","location","defaultProps","bgcolor","m","border","style","width","height","BlogPost","id","fontSize","App","classes","currentYear","format","today","parseInt","dispatch","holidayId","state","holidaySlice","holidays","console","log","todo","setTodo","date","description","isComplete","formik","initialValues","validationSchema","object","string","required","nullable","onSubmit","values","items","map","item","i","name","yourfunc"],"mappings":"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","sourcesContent":["import React,{ useEffect ,useState}  from \"react\";\nimport {useFormik} from \"formik\";\nimport {useParams} from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Link from \"@material-ui/core/Link\";\nimport {addTodo, readTodo} from '../slice/holidaySlice';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { holidayListSliceState } from \"../slice/holidaySlice\";\nimport { render } from \"@testing-library/react\";\n\n\nconst actions =(type) =>{\n  let  Button=\"\"\n    switch(type) {\n        case \"ADD\":\n          Button=\"Save\"\n          break;\n        case \"Read\":\n           Button=\"Switch to Update\" \n           break;\n        case \"UPDATE\":\n            Button=\"Delete && Switch to View && Save\"\n            break;\n        default:\n             Button=\"Goto Holidays\"\n    }\n    return Button;\n}\n    \nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    justifyContent: 'center',\n    pb: '3'\n  },\n  inputLabel: {\n    paddingLeft: '30%',    \n  },\n  textField: {\n    margin: '7'\n  }\n}))\nconst type = [\n  {\n    label:'Select',\n  },\n  {\n\n    label: 'Optional',\n  },\n  {\n\n    label: 'Fixed',\n  },\n]\nconst location = [\n  {\n    label:'Select',\n  },\n  {\n    label: 'All Locations'\n  },\n  {\n    label: 'Bettendorf,IA'\n  },\n  {\n    label: 'India'\n  }\n]\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 1,\n  style: { width: '65rem', height: '35rem' },\n};\nfunction BlogPost() {\n  let { id } = useParams();\n  return <div style={{ fontSize: \"50px\" }}>\n           Now showing post {id}\n         </div>;\n}\n\n\nexport default function App() {\n  const classes = useStyles();\n  const currentYear = moment().format(\"YYYY\");\n  const today = parseInt(currentYear);\n  const dispatch = useDispatch();\n  const holidayId=useSelector((state) =>state.holidaySlice.holidayId);\n  const holidays = useSelector(holidayListSliceState);\n  console.log(holidays,\"holidays\");\n  \n  //  const [isSave,setIsSave]= useState[1];\n  //  const [isread,setIsRead]=useState[0];\n  //for getting the data\n  const state = useSelector((state) =>state)\n    let { id} = useParams();\n    console.log({id});\n  // useEffect(()=>{\n  //   dispatch(readTodo(id))\n  // },[id])\n  const [todo,setTodo] = useState({\n    date:\"\",\n    description:\"\",\n    type:\"\",\n    location:\"\",\n    isComplete:false\n\n  })\n  \n  const formik = useFormik({\n   initialValues: {\n     \n      date:'',\n      location:'',\n      type:'',\n      description:'',\n      isComplete:false\n     \n    },\n   validationSchema: Yup.object({\n      date:Yup.string().required(\"Required!\"),\n      location:Yup.string().required(\"Required!\").nullable(),\n      type:Yup.string().required(\"Required!\").nullable(),\n      description:Yup.string().required(\"Required!\").nullable(),\n    }),\n    onSubmit: (values) => {\n      console.log(values);\n       dispatch(addTodo(values));\n      //update the state\n      // setTodo({\n      //   date:\"\",\n      //   description:\"\",\n      //   type:\"\",\n      //   location:\"\",\n      //   isComplete:false\n      // })\n      //  alert(JSON.stringify(values, null, 2));\n      \n    },\n \n  })\n\n  return (\n    // <div>\n\n    // // <form  onSubmit={formik.handleSubmit}>\n    // //             <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n    // //                       <Grid container spacing={3}>\n                          \n    // //                         <Grid item xs={2}>\n    // //                           <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n    // //                         </Grid>\n    // //                         <Grid item xs={10}>\n    // //                           <TextField\n    //                           name=\"HolidayId\"\n    //                             id=\"outlined-full-width\"\n    //                             value=\"#\"\n    //                             style={{ margin: 1 }}\n                              \n    //                             fullWidth\n    //                             margin=\"normal\"\n    //                             InputLabelProps={{\n    //                               shrink: true,\n    //                             }}\n    //                             variant=\"outlined\"\n    //                           />\n    //                         </Grid>\n                \n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                          <TextField\n    //                           id=\"date\"\n    //                           name=\"date\"\n    //                           type=\"date\"\n    //                           onChange={formik.handleChange}\n    //                            value={formik.values.date}\n                              \n    //                           style={{ margin: 1 }}\n    //                           format=\"MM/dd/yyyy\"\n    //                           fullWidth\n    //                           margin=\"normal\"\n    //                           InputLabelProps={{\n    //                             shrink: true,\n    //                           }}\n    //                           variant=\"outlined\"\n    //                         />\n    //                         {formik.errors.date && formik.touched.date && (\n    //                           <p>{formik.errors.date}</p>\n    //                         )}\n    //                        </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"location\"\n    //                             name=\"location\"\n    //                             type=\"text\"\n    //                            onChange={formik.handleChange}\n    //                             value={formik.values.location}\n                              \n    //                             select\n                             \n    //                             SelectProps={{\n    //                               native: true,\n    //                             }}\n    //                             style={{ marginRight: 1 }}\n    //                             variant=\"filled\"\n    //                             fullWidth\n                                \n    //                           >\n    //                             {location.map((option) => (\n    //                               <option key={option.value} value={option.value}>\n    //                                 {option.label}\n    //                               </option>\n    //                             ))}\n                              \n    //                           </TextField><br></br>\n    //                           {formik.errors.location && formik.touched.location && (\n    //                             <p>{formik.errors.location}</p>\n    //                           )}\n    //                         </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"type\"\n    //                             name=\"type\"\n    //                             type=\"text\"\n    //                            onChange={formik.handleChange}\n    //                            value={formik.values.type}\n                              \n    //                             select\n    //                             style={{ marginRight: 1 }}\n                             \n    //                             SelectProps={{\n    //                               native: true,\n    //                             }}\n    //                             variant=\"filled\"\n    //                             fullWidth\n                                \n    //                           >\n    //                             {type.map((option) => (\n    //                               <option key={option.value} value={option.value}>\n    //                                 {option.label}\n    //                               </option>\n    //                             ))}\n                                \n    //                           </TextField>\n    //                           {formik.errors.type && formik.touched.type&& (\n    //                             <p>{formik.errors.type}</p>\n    //                           )}\n    //                         </Grid>\n    //                         <Grid item xs={2}>\n    //                           <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n    //                         </Grid>\n    //                         <Grid item xs={10}>\n    //                           <TextField\n    //                             id=\"description\"\n    //                             name=\"description\"\n    //                             type=\"text\"\n    //                             onChange={formik.handleChange}\n    //                             values={formik.values.description}\n              \n    //                             style={{ marginRight: 1 }}\n    //                             fullWidth\n    //                             margin=\"normal\"\n    //                             InputLabelProps={{\n    //                               shrink: true,\n    //                             }}\n    //                             variant=\"outlined\"\n                              \n    //                           />\n    //                           {formik.errors.description && formik.touched.description && (\n    //                             <p>{formik.errors.description}</p>\n    //                           )}\n    //                         </Grid>\n                \n    //                         <Grid item xs={12} sm={12} md={4} lg={4}\n    //                           style={{\n    //                             textAlign: 'center'\n    //                           }}\n    //                         >\n    //                           <Button>\n                \n    //                           </Button>\n    //                         </Grid>\n    //                         <Link href='/holiday'>\n    //                           <Button\n    //                             variant=\"contained\"\n    //                             color=\"primary\"\n    //                             style={{ margin: '2 auto', display: \"flex\" }}\n    //                             type=\"submit\"\n    //                             startIcon={<SaveIcon />}\n    //                           >\n    //                             Save\n    //                           </Button>\n    //                         </Link>\n    //                         <Link href='/'>\n    //                           <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n    //                           </Link>\n                             \n    //                       {/* <Link href='/holiday/:id?type=\"read\"'>\n    //                       //  {actionType=\"read\" && (\n    //                       //     <Button variant=\"contained\"  color=\"primary\" style={{ margin: '3 auto', display: \"flex\" }}>Switch To update</Button>\n    //                       //      <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n    //                       //     </Link>\n    //                         <Link href='/holiday/:id?type=\"update\"'>\n    //                        <Button\n    //                       //     variant=\"contained\"\n    //                       //     color=\"secondary\"\n                              \n    //                       //     startIcon={<DeleteIcon />}\n    //                       //       >\n    //                       //      Delete\n    //                       //    </Button>\n    //                       //    </Link>\n    //                       //   <Link href='/holiday/:id?type=\"update\"'>\n    //                       //     <Button variant=\"contained\" color=\"primary\" style={{ margin: '3 auto', display: \"flex\"}}>Switch to view</Button>\n    //                         //   </Link> */}\n                            \n    //                      </Grid>\n                \n    //                </Box>\n    //               </form>\n    //               </div>\n    <ul id=\"todo\">\n    {this.state.items.map((item,i) => \n      <li className='list-group-item' key={i} data-id={item.id}>{item.name}\n      <button onClick={() => this.yourfunc(item.id)}>X</button>\n      </li>\n    )}\n    </ul>\n                )\n        }   \n\n"]},"metadata":{},"sourceType":"module"}