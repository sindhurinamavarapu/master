{"ast":null,"code":"var _jsxFileName = \"/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js\",\n    _s = $RefreshSig$();\n\n// import React,{useEffect,useState} from \"react\";\n// import {useFormik} from \"formik\";\n//  import {useParams} from \"react-router-dom\";\n// import * as Yup from \"yup\";\n// import { makeStyles } from '@material-ui/core';\n// import Grid from \"@material-ui/core/Grid\";\n// import Box from \"@material-ui/core/Box\";\n// import TextField from '@material-ui/core/TextField';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import Button from '@material-ui/core/Button';\n// import SaveIcon from '@material-ui/icons/Save';\n// // import DeleteIcon from '@material-ui/icons/Delete';\n// import Link from \"@material-ui/core/Link\";\n// import {addTodo, readTodo} from '../slice/holidaySlice';\n// import {setForID,setHolidays} from '../slice/holidaySlice';\n// import { useDispatch } from \"react-redux\";\n// import { useSelector } from \"react-redux\";\n// // import moment from \"moment\";\n// import { holidayListSliceState } from \"../slice/holidaySlice\";\n// // import { render } from \"@testing-library/react\";\n// const actions =(type) =>{\n//   let  Button=\"\"\n//     switch(type) {\n//         case \"ADD\":\n//           Button=\"Save\"\n//           break;\n//         case \"READ\":\n//            Button=\"Switch to Update\" \n//            break;\n//         case \"UPDATE\":\n//             Button=\"Delete && Switch to View && Save\"\n//             break;\n//         default:\n//              Button=\"Goto Holidays\"\n//     }\n//     return Button;\n// }\n// const useStyles = makeStyles((theme) => ({\n//   button: {\n//     margin: theme.spacing(1),\n//   },\n//   root: {\n//     justifyContent: 'center',\n//     pb: '3'\n//   },\n//   inputLabel: {\n//     paddingLeft: '30%',    \n//   },\n//   textField: {\n//     margin: '7'\n//   }\n// }))\n// const type = [\n//   {\n//     label:'Select',\n//   },\n//   {\n//     label: 'Optional',\n//   },\n//   {\n//     label: 'Fixed',\n//   },\n// ]\n// const location = [\n//   {\n//     label:'Select',\n//   },\n//   {\n//     label: 'All Locations'\n//   },\n//   {\n//     label: 'Bettendorf,IA'\n//   },\n//   {\n//     label: 'India'\n//   }\n// ]\n// const defaultProps = {\n//   bgcolor: 'background.paper',\n//   m: 1,\n//   border: 1,\n//   style: { width: '65rem', height: '35rem' },\n// };\n// export default function App() {\n//   const classes = useStyles();\n//   const dispatch = useDispatch();\n//   const holidays = useSelector(holidayListSliceState);\n//     console.log(\"holidays\",holidays);\n//     // const {id,date}=holidays.holidays[0].HolidayId;\n//     // console.log(\"1\",{id,date})\n//     const [AllHolidays,setHolidays]= useState([]);\n//     //  console.log(\"id\",holidays.holidays[0].HolidayId)\n//   //   //setting the values \n//   //   const [values,setValues]=useState([]);\n//   //   const [todos,setNewTodos] =useState([]);\n//   // const handleSubmit = e =>{\n//   //       e.preventDefault();\n//   //       if(!values) return;\n//   //       addTodo(values);\n//   //     setValues('');\n//   // }\n//   // const addTodo =text =>{\n//   //   const setNewTodos=[...todos,{text}];\n//   // }\n//   //   const {id}  = useParams();\n//   // console.log((\"params\",{id}));\n//   //    useEffect((id)=>{\n//   //      console.log(id,\"id\")\n//   //   dispatch(readTodo(id))\n//   // },[id])\n//   const formik = useFormik({\n//    initialValues: {\n//       date:'',\n//       location:'',\n//       type:'',\n//       description:'',\n//       isComplete:false\n//     },\n//    validationSchema: Yup.object({\n//       date:Yup.string().required(\"Required!\"),\n//       location:Yup.string().required(\"Required!\").nullable(),\n//       type:Yup.string().required(\"Required!\").nullable(),\n//       description:Yup.string().required(\"Required!\").nullable(),\n//     }),\n//     onSubmit: (values) => {\n//       console.log(values,\"values\");\n//         dispatch(addTodo(values));\n//        //dispatch(setHolidays(values));\n//       //update the state\n//       // setTodo({\n//       //   date:\"\",\n//       //   description:\"\",\n//       //   type:\"\",\n//       //   location:\"\",\n//       //   isComplete:false\n//       // })\n//        alert(JSON.stringify(values, null, 2));\n//     },\n//   })\n//   // {APIData.map((data) =>\n//   return (\n//     <div className=\"App\">\n//  <form  onSubmit={formik.handleSubmit} key={holidays.HolidayId }>\n//                 <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n//                           <Grid container spacing={3}>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                               name=\"HolidayId\"\n//                                 id=\"outlined-full-width\"\n//                                  value={holidays.HolidayId}\n//                                 style={{ margin: 1 }}\n//                                 fullWidth\n//                                 margin=\"normal\"\n//                                 InputLabelProps={{\n//                                   shrink: true,\n//                                 }}\n//                                 variant=\"outlined\"\n//                                 disabled\n//                               />\n//                             </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                              <TextField\n//                               id=\"date\"\n//                               name=\"date\"\n//                               type=\"date\"\n//                               onChange={formik.handleChange}\n//                                 // value={formik.holiday.date}\n//                               value={formik.values.date}\n//                               style={{ margin: 1 }}\n//                               format=\"MM/dd/yyyy\"\n//                               fullWidth\n//                               margin=\"normal\"\n//                               InputLabelProps={{\n//                                 shrink: true,\n//                               }}\n//                               variant=\"outlined\"\n//                             />\n//                             {formik.errors.date && formik.touched.date && (\n//                               <p>{formik.errors.date}</p>\n//                             )}\n//                            </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"location\"\n//                                 name=\"location\"\n//                                 type=\"text\"\n//                                onChange={formik.handleChange}\n//                                 value={formik.values.location}\n//                                 select\n//                                 SelectProps={{\n//                                   native: true,\n//                                 }}\n//                                 style={{ marginRight: 1 }}\n//                                 variant=\"filled\"\n//                                 fullWidth\n//                               >\n//                                 {location.map((option) => (\n//                                   <option key={option.value} value={option.value}>\n//                                     {option.label}\n//                                   </option>\n//                                 ))}\n//                               </TextField><br></br>\n//                               {formik.errors.location && formik.touched.location && (\n//                                 <p>{formik.errors.location}</p>\n//                               )}\n//                             </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"type\"\n//                                 name=\"type\"\n//                                 type=\"text\"\n//                                onChange={formik.handleChange}\n//                                value={formik.values.type}\n//                                 select\n//                                 style={{ marginRight: 1 }}\n//                                 SelectProps={{\n//                                   native: true,\n//                                 }}\n//                                 variant=\"filled\"\n//                                 fullWidth\n//                               >\n//                                 {type.map((option) => (\n//                                   <option key={option.value} value={option.value}>\n//                                     {option.label}\n//                                   </option>\n//                                 ))}\n//                               </TextField>\n//                               {formik.errors.type && formik.touched.type&& (\n//                                 <p>{formik.errors.type}</p>\n//                               )}\n//                             </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"description\"\n//                                 name=\"description\"\n//                                 type=\"text\"\n//                                 onChange={formik.handleChange}\n//                                 values={formik.values.description}\n//                                 style={{ marginRight: 1 }}\n//                                 fullWidth\n//                                 margin=\"normal\"\n//                                 InputLabelProps={{\n//                                   shrink: true,\n//                                 }}\n//                                 variant=\"outlined\"\n//                               />\n//                               {formik.errors.description && formik.touched.description && (\n//                                 <p>{formik.errors.description}</p>\n//                               )}\n//                             </Grid>\n//                             <Grid item xs={12} sm={12} md={4} lg={4}\n//                               style={{\n//                                 textAlign: 'center'\n//                               }}\n//                             >\n//                               <Button>\n//                               </Button>\n//                             </Grid>\n//                             <Link href='/holiday'>\n//                               <Button\n//                                 variant=\"contained\"\n//                                 color=\"primary\"\n//                                 style={{ margin: '2 auto', display: \"flex\" }}\n//                                 type=\"submit\"\n//                                 startIcon={<SaveIcon />}\n//                               >\n//                                 Save\n//                               </Button>\n//                             </Link>\n//                             <Link href='/'>\n//                               <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n//                               </Link>\n//                           {/* <Link href='/holiday/:id?type=\"read\"'>\n//                            {actionType ===\"read\" && (\n//                               <Button variant=\"contained\"  color=\"primary\" style={{ margin: '3 auto', display: \"flex\" }}>Switch To update</Button>\n//                                <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n//                               </Link>\n//                             <Link href='/holiday/:id?type=\"update\"'>\n//                            <Button\n//                           //     variant=\"contained\"\n//                           //     color=\"secondary\"\n//                           //     startIcon={<DeleteIcon />}\n//                           //       >\n//                           //      Delete\n//                           //    </Button>\n//                           //    </Link>\n//                           //   <Link href='/holiday/:id?type=\"update\"'>\n//                           //     <Button variant=\"contained\" color=\"primary\" style={{ margin: '3 auto', display: \"flex\"}}>Switch to view</Button>\n//                             //   </Link> */}\n//                          </Grid>\n//                    </Box>\n//                   </form>\n//                      </div>\n//                )\n//        }   \nimport React, { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save'; // import DeleteIcon from '@material-ui/icons/Delete';\n\nimport Link from \"@material-ui/core/Link\";\nimport { addTodo, readTodo } from '../slice/holidaySlice';\nimport { setForID, setHolidays } from '../slice/holidaySlice';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\"; // import moment from \"moment\";\n\nimport { holidayListSliceState } from \"../slice/holidaySlice\";\nimport moment from \"moment\";\nimport { setStatus } from \"../slice/test\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  root: {\n    justifyContent: 'center',\n    pb: '3'\n  },\n  inputLabel: {\n    paddingLeft: '30%'\n  },\n  textField: {\n    margin: '7'\n  }\n}));\nconst type = [{\n  label: 'Select'\n}, {\n  label: 'Optional'\n}, {\n  label: 'Fixed'\n}];\nconst location = [{\n  label: 'Select'\n}, {\n  label: 'All Locations'\n}, {\n  label: 'Bettendorf,IA'\n}, {\n  label: 'India'\n}];\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 1,\n  style: {\n    width: '65rem',\n    height: '35rem'\n  }\n};\nexport default function App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const dataForId = useSelector(state => state.holidaySlice.dataForId);\n  const year = useSelector(state => state.holidaySlice.year);\n  const [isViewMode, setIsViewMode] = useState(1);\n  const [isSaveMode, setIsSavemode] = useState(0);\n  const msg = useSelector(state => state.holidaySlice.status.msg);\n  const statuscolor = useSelector(state => state.holidaySlice.color); //using paramas get the id\n\n  let {\n    id,\n    actionType\n  } = useParams();\n\n  if (dataForId.id !== \"\" && dataForId.id !== 0 && actionType.type === \"insert\") {\n    id = dataForId.id;\n    actiontype = \"update\";\n  } //    //handle change in holiday type\n  //    const handleChangeType =(event,newValue) =>{\n  //        if(newvalue===null){\n  //            newValue=\"\"\n  //        }\n  //        if(dataForId.location === \"\" || dataForId.description === \"\" || dataForId.date=== \"\" ||dataForId.type===\"\" || newValue === \"\"){\n  //          setIsSavemode(0);\n  //        }else{\n  //            setIsSavemode(1);\n  //        }\n  //        dispatchEvent(setForId({...dataForId,type:reverse_type[newValue]}))\n  //    };\n  // //handle change  in holiday Location\n  //        const handlelocationchange = (event,newValue) =>{\n  //            if(newValue === null){\n  //                newValue =\"\";\n  //            }\n  //            if(dataForId.location === \"\" || dataForId.description === \"\" || dataForId.date=== \"\" ||dataForId.type===\"\" || newValue === \"\"){\n  //             setIsSavemode(0);\n  //           }else{\n  //               setIsSavemode(1);\n  //           }\n  //           dispatchEvent(setForId({...dataForId,location:reverse_location[newValue]}))\n  //       };\n  // //handle change in description\n  // const handleChangeDesc = (event) =>{\n  //     if(dataForId.type === \"\" || event.target.value.trim() ===\"\" ||dataForId.location=== \"\" ||dataForId.date ===\"\"){\n  //          setIsSavemode(0);\n  //     }else{\n  //         setIsSavemode(1);\n  //     }\n  //     dispatchEvent(setForId({...dataForId,description:event.target.value}))\n  // }\n  // //handle change  in date\n  // const handleChangeDate = (date) =>{\n  //     if(dataForId.type===\"\" || dataForId.description === \"\" || dataForId.location ===\"\" || date.target.value === \"\"){\n  //       setIsSavemode(0);\n  //     }else{\n  //         setIsSavemode(1);\n  //     }\n  //     dispatchEvent(setForId({...dataForId,date:moment(date.target.value).format(\"YYYY-MM-DD\")\n  // })\n  // );\n  // }\n  // };\n  // const handleSaveClick =() =>{\n  //     if(actiontype  === \"update\"){\n  //         dispatchEvent(updateId(id,dataForId));\n  //     }else if(actionType === \"insert\") {\n  //         dispatchEvent(insert(dataForId));\n  //     }\n  // }\n\n\n  useEffect(() => {\n    if (actionType === \"view\") {\n      setIsViewMode(1);\n      dispatch(getId(id));\n      dispatch(setStatus({\n        msg: \"\",\n        color: \"\"\n      }));\n    } else if (actionType === \"update\") {\n      setIsViewMode(0);\n      setIsSaveMode(1);\n      dispatch(getId(id));\n    } else {\n      setIsSavemode(0);\n      setIsViewMode(0);\n    }\n  }, [id, actionType, dispatch]);\n  const formik = useFormik({\n    initialValues: {\n      date: '',\n      location: '',\n      type: '',\n      description: '',\n      isComplete: false\n    },\n    validationSchema: Yup.object({\n      date: Yup.string().required(\"Required!\"),\n      location: Yup.string().required(\"Required!\").nullable(),\n      type: Yup.string().required(\"Required!\").nullable(),\n      description: Yup.string().required(\"Required!\").nullable()\n    }),\n    onSubmit: values => {\n      console.log(values, \"values\");\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        border: 1,\n        ...defaultProps,\n        px: 2,\n        pt: 5,\n        pb: 4,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"Holiday Id\",\n              margin: \"dense\",\n              varient: \"outlined\",\n              className: classes.inputLabel,\n              children: \"Holiday Id:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"HolidayId\",\n              id: \"outlined-full-width\",\n              value: dataForId.id,\n              disabled: true,\n              style: {\n                margin: 1\n              },\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\",\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"Date\",\n              className: classes.inputLabel,\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"date\",\n              name: \"date\",\n              type: \"date\",\n              onChange: formik.handleChange // value={formik.holiday.date}\n              ,\n              value: formik.values.date,\n              style: {\n                margin: 1\n              },\n              format: \"MM/dd/yyyy\",\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 18\n            }, this), formik.errors.date && formik.touched.date && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"location\",\n              className: classes.inputLabel,\n              children: \"Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"location\",\n              name: \"location\",\n              type: \"text\",\n              options: locationOptions,\n              value: enum_location[dataForId.location],\n              onChange: handlelocationChange,\n              select: true,\n              Props: {\n                native: true\n              },\n              style: {\n                marginRight: 1\n              },\n              variant: \"filled\",\n              fullWidth: true,\n              children: location.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 31\n            }, this), formik.errors.location && formik.touched.location && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.location\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"type\",\n              className: classes.inputLabel,\n              children: \"Holiday Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"type\",\n              name: \"type\",\n              type: \"text\",\n              onChange: handletypeChange,\n              value: enum_type[dataForId.type],\n              select: true,\n              style: {\n                marginRight: 1\n              },\n              SelectProps: {\n                native: true\n              },\n              variant: \"filled\",\n              fullWidth: true,\n              children: type.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 19\n            }, this), formik.errors.type && formik.touched.type && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"description\",\n              className: classes.inputLabel,\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"description\",\n              name: \"description\",\n              type: \"text\",\n              onChange: formik.handleChange,\n              values: formik.values.description,\n              style: {\n                marginRight: 1\n              },\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 19\n            }, this), formik.errors.description && formik.touched.description && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 12,\n            md: 4,\n            lg: 4,\n            style: {\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/holiday\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              style: {\n                margin: '2 auto',\n                display: \"flex\"\n              },\n              type: \"submit\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 32\n              }, this),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              style: {\n                margin: '3 auto',\n                display: \"flex\"\n              },\n              children: \"Goto:Holidays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 5\n      }, this)\n    }, holidays.HolidayId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6CtxtkT2s05J48OhbHe3STEZxoI=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector, useSelector, useParams, useFormik];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js"],"names":["React","useEffect","useState","useFormik","useParams","Yup","makeStyles","Grid","Box","TextField","InputLabel","Button","SaveIcon","Link","addTodo","readTodo","setForID","setHolidays","useDispatch","useSelector","holidayListSliceState","moment","setStatus","useStyles","theme","button","margin","spacing","root","justifyContent","pb","inputLabel","paddingLeft","textField","type","label","location","defaultProps","bgcolor","m","border","style","width","height","App","classes","dispatch","dataForId","state","holidaySlice","year","isViewMode","setIsViewMode","isSaveMode","setIsSavemode","msg","status","statuscolor","color","id","actionType","actiontype","getId","setIsSaveMode","formik","initialValues","date","description","isComplete","validationSchema","object","string","required","nullable","onSubmit","values","console","log","alert","JSON","stringify","handleSubmit","shrink","handleChange","errors","touched","locationOptions","enum_location","handlelocationChange","native","marginRight","map","option","value","handletypeChange","enum_type","textAlign","display","holidays","HolidayId"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA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","sourcesContent":["// import React,{useEffect,useState} from \"react\";\n// import {useFormik} from \"formik\";\n//  import {useParams} from \"react-router-dom\";\n// import * as Yup from \"yup\";\n// import { makeStyles } from '@material-ui/core';\n// import Grid from \"@material-ui/core/Grid\";\n// import Box from \"@material-ui/core/Box\";\n// import TextField from '@material-ui/core/TextField';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import Button from '@material-ui/core/Button';\n// import SaveIcon from '@material-ui/icons/Save';\n// // import DeleteIcon from '@material-ui/icons/Delete';\n// import Link from \"@material-ui/core/Link\";\n// import {addTodo, readTodo} from '../slice/holidaySlice';\n// import {setForID,setHolidays} from '../slice/holidaySlice';\n// import { useDispatch } from \"react-redux\";\n// import { useSelector } from \"react-redux\";\n// // import moment from \"moment\";\n// import { holidayListSliceState } from \"../slice/holidaySlice\";\n// // import { render } from \"@testing-library/react\";\n\n\n// const actions =(type) =>{\n//   let  Button=\"\"\n//     switch(type) {\n//         case \"ADD\":\n//           Button=\"Save\"\n//           break;\n//         case \"READ\":\n//            Button=\"Switch to Update\" \n//            break;\n//         case \"UPDATE\":\n//             Button=\"Delete && Switch to View && Save\"\n//             break;\n//         default:\n//              Button=\"Goto Holidays\"\n//     }\n//     return Button;\n// }\n    \n// const useStyles = makeStyles((theme) => ({\n//   button: {\n//     margin: theme.spacing(1),\n//   },\n//   root: {\n//     justifyContent: 'center',\n//     pb: '3'\n//   },\n//   inputLabel: {\n//     paddingLeft: '30%',    \n//   },\n//   textField: {\n//     margin: '7'\n//   }\n// }))\n// const type = [\n//   {\n//     label:'Select',\n//   },\n//   {\n\n//     label: 'Optional',\n//   },\n//   {\n\n//     label: 'Fixed',\n//   },\n// ]\n// const location = [\n//   {\n//     label:'Select',\n//   },\n//   {\n//     label: 'All Locations'\n//   },\n//   {\n//     label: 'Bettendorf,IA'\n//   },\n//   {\n//     label: 'India'\n//   }\n// ]\n// const defaultProps = {\n//   bgcolor: 'background.paper',\n//   m: 1,\n//   border: 1,\n//   style: { width: '65rem', height: '35rem' },\n// };\n\n\n\n// export default function App() {\n//   const classes = useStyles();\n//   const dispatch = useDispatch();\n//   const holidays = useSelector(holidayListSliceState);\n//     console.log(\"holidays\",holidays);\n//     // const {id,date}=holidays.holidays[0].HolidayId;\n//     // console.log(\"1\",{id,date})\n//     const [AllHolidays,setHolidays]= useState([]);\n//     //  console.log(\"id\",holidays.holidays[0].HolidayId)\n//   //   //setting the values \n//   //   const [values,setValues]=useState([]);\n//   //   const [todos,setNewTodos] =useState([]);\n\n//   // const handleSubmit = e =>{\n//   //       e.preventDefault();\n//   //       if(!values) return;\n//   //       addTodo(values);\n//   //     setValues('');\n//   // }\n\n//   // const addTodo =text =>{\n//   //   const setNewTodos=[...todos,{text}];\n    \n//   // }\n\n//   //   const {id}  = useParams();\n//   // console.log((\"params\",{id}));\n//   //    useEffect((id)=>{\n//   //      console.log(id,\"id\")\n//   //   dispatch(readTodo(id))\n//   // },[id])\n \n//   const formik = useFormik({\n//    initialValues: {\n     \n//       date:'',\n//       location:'',\n//       type:'',\n//       description:'',\n//       isComplete:false\n     \n//     },\n//    validationSchema: Yup.object({\n//       date:Yup.string().required(\"Required!\"),\n//       location:Yup.string().required(\"Required!\").nullable(),\n//       type:Yup.string().required(\"Required!\").nullable(),\n//       description:Yup.string().required(\"Required!\").nullable(),\n//     }),\n//     onSubmit: (values) => {\n//       console.log(values,\"values\");\n//         dispatch(addTodo(values));\n//        //dispatch(setHolidays(values));\n//       //update the state\n//       // setTodo({\n//       //   date:\"\",\n//       //   description:\"\",\n//       //   type:\"\",\n//       //   location:\"\",\n//       //   isComplete:false\n//       // })\n//        alert(JSON.stringify(values, null, 2));\n      \n//     },\n \n//   })\n//   // {APIData.map((data) =>\n//   return (\n//     <div className=\"App\">\n   \n \n//  <form  onSubmit={formik.handleSubmit} key={holidays.HolidayId }>\n          \n//                 <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n//                           <Grid container spacing={3}>\n                          \n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                               name=\"HolidayId\"\n//                                 id=\"outlined-full-width\"\n//                                  value={holidays.HolidayId}\n                                \n//                                 style={{ margin: 1 }}\n                              \n//                                 fullWidth\n//                                 margin=\"normal\"\n//                                 InputLabelProps={{\n//                                   shrink: true,\n//                                 }}\n//                                 variant=\"outlined\"\n//                                 disabled\n//                               />\n//                             </Grid>\n                \n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                              <TextField\n//                               id=\"date\"\n//                               name=\"date\"\n//                               type=\"date\"\n//                               onChange={formik.handleChange}\n//                                 // value={formik.holiday.date}\n//                               value={formik.values.date}\n//                               style={{ margin: 1 }}\n//                               format=\"MM/dd/yyyy\"\n//                               fullWidth\n//                               margin=\"normal\"\n//                               InputLabelProps={{\n//                                 shrink: true,\n//                               }}\n//                               variant=\"outlined\"\n//                             />\n                            \n//                             {formik.errors.date && formik.touched.date && (\n//                               <p>{formik.errors.date}</p>\n//                             )}\n//                            </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"location\"\n//                                 name=\"location\"\n//                                 type=\"text\"\n//                                onChange={formik.handleChange}\n//                                 value={formik.values.location}\n                              \n//                                 select\n                             \n//                                 SelectProps={{\n//                                   native: true,\n//                                 }}\n//                                 style={{ marginRight: 1 }}\n//                                 variant=\"filled\"\n//                                 fullWidth\n                                \n//                               >\n//                                 {location.map((option) => (\n//                                   <option key={option.value} value={option.value}>\n//                                     {option.label}\n//                                   </option>\n//                                 ))}\n                              \n//                               </TextField><br></br>\n//                               {formik.errors.location && formik.touched.location && (\n//                                 <p>{formik.errors.location}</p>\n//                               )}\n//                             </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"type\"\n//                                 name=\"type\"\n//                                 type=\"text\"\n//                                onChange={formik.handleChange}\n//                                value={formik.values.type}\n                              \n//                                 select\n//                                 style={{ marginRight: 1 }}\n                             \n//                                 SelectProps={{\n//                                   native: true,\n//                                 }}\n//                                 variant=\"filled\"\n//                                 fullWidth\n                                \n//                               >\n//                                 {type.map((option) => (\n//                                   <option key={option.value} value={option.value}>\n//                                     {option.label}\n//                                   </option>\n//                                 ))}\n                                \n//                               </TextField>\n//                               {formik.errors.type && formik.touched.type&& (\n//                                 <p>{formik.errors.type}</p>\n//                               )}\n//                             </Grid>\n//                             <Grid item xs={2}>\n//                               <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n//                             </Grid>\n//                             <Grid item xs={10}>\n//                               <TextField\n//                                 id=\"description\"\n//                                 name=\"description\"\n//                                 type=\"text\"\n//                                 onChange={formik.handleChange}\n//                                 values={formik.values.description}\n              \n//                                 style={{ marginRight: 1 }}\n//                                 fullWidth\n//                                 margin=\"normal\"\n//                                 InputLabelProps={{\n//                                   shrink: true,\n//                                 }}\n//                                 variant=\"outlined\"\n                              \n//                               />\n//                               {formik.errors.description && formik.touched.description && (\n//                                 <p>{formik.errors.description}</p>\n//                               )}\n//                             </Grid>\n                \n//                             <Grid item xs={12} sm={12} md={4} lg={4}\n//                               style={{\n//                                 textAlign: 'center'\n//                               }}\n//                             >\n//                               <Button>\n                \n//                               </Button>\n//                             </Grid>\n//                             <Link href='/holiday'>\n//                               <Button\n//                                 variant=\"contained\"\n//                                 color=\"primary\"\n//                                 style={{ margin: '2 auto', display: \"flex\" }}\n//                                 type=\"submit\"\n//                                 startIcon={<SaveIcon />}\n//                               >\n//                                 Save\n//                               </Button>\n//                             </Link>\n//                             <Link href='/'>\n//                               <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n//                               </Link>\n                            \n//                           {/* <Link href='/holiday/:id?type=\"read\"'>\n//                            {actionType ===\"read\" && (\n//                               <Button variant=\"contained\"  color=\"primary\" style={{ margin: '3 auto', display: \"flex\" }}>Switch To update</Button>\n//                                <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n//                               </Link>\n//                             <Link href='/holiday/:id?type=\"update\"'>\n//                            <Button\n//                           //     variant=\"contained\"\n//                           //     color=\"secondary\"\n                              \n//                           //     startIcon={<DeleteIcon />}\n//                           //       >\n//                           //      Delete\n//                           //    </Button>\n//                           //    </Link>\n//                           //   <Link href='/holiday/:id?type=\"update\"'>\n                        \n//                           //     <Button variant=\"contained\" color=\"primary\" style={{ margin: '3 auto', display: \"flex\"}}>Switch to view</Button>\n//                             //   </Link> */}\n                            \n                          \n//                          </Grid>\n                \n//                    </Box>\n//                   </form>\n              \n                            \n//                      </div>\n//                )\n//        }   \n\nimport React,{useEffect,useState} from \"react\";\nimport {useFormik} from \"formik\";\n import {useParams} from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\n// import DeleteIcon from '@material-ui/icons/Delete';\nimport Link from \"@material-ui/core/Link\";\nimport {addTodo, readTodo} from '../slice/holidaySlice';\nimport {setForID,setHolidays} from '../slice/holidaySlice';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n// import moment from \"moment\";\nimport { holidayListSliceState } from \"../slice/holidaySlice\";\nimport moment from \"moment\";\nimport { setStatus } from \"../slice/test\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n    root: {\n      justifyContent: 'center',\n      pb: '3'\n    },\n    inputLabel: {\n      paddingLeft: '30%',    \n    },\n    textField: {\n      margin: '7'\n    }\n  }))\n  const type = [\n    {\n      label:'Select',\n    },\n    {\n  \n      label: 'Optional',\n    },\n    {\n  \n      label: 'Fixed',\n    },\n  ]\n  const location = [\n    {\n      label:'Select',\n    },\n    {\n      label: 'All Locations'\n    },\n    {\n      label: 'Bettendorf,IA'\n    },\n    {\n      label: 'India'\n    }\n  ]\n  const defaultProps = {\n    bgcolor: 'background.paper',\n    m: 1,\n    border: 1,\n    style: { width: '65rem', height: '35rem' },\n  };\n  \n  export default function App() {\n   const classes=useStyles();\n   const dispatch = useDispatch();\n   const dataForId = useSelector((state)=>state.holidaySlice.dataForId)\n   const year= useSelector((state)=>state.holidaySlice.year);\n   const[isViewMode,setIsViewMode] = useState(1);\n   const[isSaveMode,setIsSavemode]= useState(0);\n   const msg=useSelector((state)=>state.holidaySlice.status.msg);\n   const statuscolor=useSelector((state)=>state.holidaySlice.color);\n   //using paramas get the id\n   let {id,actionType} =useParams();\n   if(dataForId.id !== \"\" && dataForId.id !== 0 && actionType.type === \"insert\") {\n       id=dataForId.id;\n       actiontype=\"update\";\n   }\n//    //handle change in holiday type\n//    const handleChangeType =(event,newValue) =>{\n//        if(newvalue===null){\n//            newValue=\"\"\n//        }\n//        if(dataForId.location === \"\" || dataForId.description === \"\" || dataForId.date=== \"\" ||dataForId.type===\"\" || newValue === \"\"){\n//          setIsSavemode(0);\n//        }else{\n//            setIsSavemode(1);\n//        }\n//        dispatchEvent(setForId({...dataForId,type:reverse_type[newValue]}))\n//    };\n    \n// //handle change  in holiday Location\n//        const handlelocationchange = (event,newValue) =>{\n//            if(newValue === null){\n//                newValue =\"\";\n//            }\n//            if(dataForId.location === \"\" || dataForId.description === \"\" || dataForId.date=== \"\" ||dataForId.type===\"\" || newValue === \"\"){\n//             setIsSavemode(0);\n//           }else{\n//               setIsSavemode(1);\n//           }\n//           dispatchEvent(setForId({...dataForId,location:reverse_location[newValue]}))\n//       };\n// //handle change in description\n\n// const handleChangeDesc = (event) =>{\n//     if(dataForId.type === \"\" || event.target.value.trim() ===\"\" ||dataForId.location=== \"\" ||dataForId.date ===\"\"){\n//          setIsSavemode(0);\n//     }else{\n//         setIsSavemode(1);\n//     }\n//     dispatchEvent(setForId({...dataForId,description:event.target.value}))\n// }\n\n// //handle change  in date\n\n// const handleChangeDate = (date) =>{\n//     if(dataForId.type===\"\" || dataForId.description === \"\" || dataForId.location ===\"\" || date.target.value === \"\"){\n//       setIsSavemode(0);\n//     }else{\n//         setIsSavemode(1);\n//     }\n//     dispatchEvent(setForId({...dataForId,date:moment(date.target.value).format(\"YYYY-MM-DD\")\n// })\n// );\n// }\n// };\n\n// const handleSaveClick =() =>{\n//     if(actiontype  === \"update\"){\n//         dispatchEvent(updateId(id,dataForId));\n//     }else if(actionType === \"insert\") {\n//         dispatchEvent(insert(dataForId));\n//     }\n// }\n\n  \n\nuseEffect(()=>{\n    if(actionType === \"view\"){\n        setIsViewMode(1);\n        dispatch(getId(id));\n        dispatch(setStatus({msg:\"\",color:\"\"}))\n    }else if(actionType === \"update\"){\n        setIsViewMode(0);\n        setIsSaveMode(1);\n        dispatch(getId(id));\n    } else{\n        setIsSavemode(0);\n        setIsViewMode(0);\n    }\n},[id,actionType,dispatch]);\n\nconst formik = useFormik({\n    initialValues: {\n       date:'',\n       location:'',\n       type:'',\n       description:'',\n       isComplete:false\n      \n     },\n    validationSchema: Yup.object({\n       date:Yup.string().required(\"Required!\"),\n       location:Yup.string().required(\"Required!\").nullable(),\n       type:Yup.string().required(\"Required!\").nullable(),\n       description:Yup.string().required(\"Required!\").nullable(),\n     }),\n     onSubmit: (values) => {\n       console.log(values,\"values\");\n        alert(JSON.stringify(values, null, 2));\n       \n     }})\n  \n\n\nreturn (\n    <div className=\"App\">\n    <form  onSubmit={formik.handleSubmit} key={holidays.HolidayId }>\n          \n    <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n              <Grid container spacing={3}>\n              \n                <Grid item xs={2}>\n                  <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n                </Grid>\n                <Grid item xs={10}>\n                  <TextField\n                  name=\"HolidayId\"\n                    id=\"outlined-full-width\"\n                     value={dataForId.id}\n                    disabled={true}\n                    style={{ margin: 1 }}\n                  \n                    fullWidth\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    disabled\n                  />\n                </Grid>\n    \n                <Grid item xs={2}>\n                  <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n                </Grid>\n                <Grid item xs={10}>\n                 <TextField\n                  id=\"date\"\n                  name=\"date\"\n                  type=\"date\"\n                  onChange={formik.handleChange}\n                    // value={formik.holiday.date}\n                  value={formik.values.date}\n                  style={{ margin: 1 }}\n                  format=\"MM/dd/yyyy\"\n                  fullWidth\n                  margin=\"normal\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                />\n                \n                {formik.errors.date && formik.touched.date && (\n                  <p>{formik.errors.date}</p>\n                )}\n               </Grid>\n                <Grid item xs={2}>\n                  <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n                </Grid>\n                <Grid item xs={10}>\n                  <TextField\n                    id=\"location\"\n                    name=\"location\"\n                    type=\"text\"\n                    options={locationOptions}\n                    value={enum_location[dataForId.location]}\n                   onChange={handlelocationChange}\n                    select\n                    Props={{\n                      native: true,\n                    }}\n                    style={{ marginRight: 1 }}\n                    variant=\"filled\"\n                    fullWidth\n                     >\n                    {location.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  \n                  </TextField><br></br>\n                  {formik.errors.location && formik.touched.location && (\n                    <p>{formik.errors.location}</p>\n                  )}\n                </Grid>\n                <Grid item xs={2}>\n                  <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n                </Grid>\n                <Grid item xs={10}>\n                  <TextField\n                    id=\"type\"\n                    name=\"type\"\n                    type=\"text\"\n                   onChange={handletypeChange}\n                   value={enum_type[dataForId.type]}\n                  \n                    select\n                    style={{ marginRight: 1 }}\n                 \n                    SelectProps={{\n                      native: true,\n                    }}\n                    variant=\"filled\"\n                    fullWidth\n                    \n                  >\n                    {type.map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                    \n                  </TextField>\n                  {formik.errors.type && formik.touched.type&& (\n                    <p>{formik.errors.type}</p>\n                  )}\n                </Grid>\n                <Grid item xs={2}>\n                  <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n                </Grid>\n                <Grid item xs={10}>\n                  <TextField\n                    id=\"description\"\n                    name=\"description\"\n                    type=\"text\"\n                    onChange={formik.handleChange}\n                    values={formik.values.description}\n  \n                    style={{ marginRight: 1 }}\n                    fullWidth\n                    margin=\"normal\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                  \n                  />\n                  {formik.errors.description && formik.touched.description && (\n                    <p>{formik.errors.description}</p>\n                  )}\n                </Grid>\n    \n                <Grid item xs={12} sm={12} md={4} lg={4}\n                  style={{\n                    textAlign: 'center'\n                  }}\n                >\n                  <Button>\n    \n                  </Button>\n                </Grid>\n                <Link href='/holiday'>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    style={{ margin: '2 auto', display: \"flex\" }}\n                    type=\"submit\"\n                    startIcon={<SaveIcon />}\n                  >\n                    Save\n                  </Button>\n                </Link>\n                <Link href='/'>\n                  <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n                  </Link>\n                \n              {/* <Link href='/holiday/:id?type=\"read\"'>\n               { actionType ===\"read\" && (\n                  <Button variant=\"contained\"  color=\"primary\" style={{ margin: '3 auto', display: \"flex\" }}>Switch To update</Button>\n                   <Button variant=\"contained\" style={{ margin: '3 auto', display: \"flex\" }} >Goto:Holidays</Button>\n                  </Link>\n                <Link href='/holiday/:id?type=\"update\"'>\n               <Button\n              //     variant=\"contained\"\n              //     color=\"secondary\"\n                  \n              //     startIcon={<DeleteIcon />}\n              //       >\n              //      Delete\n              //    </Button>\n              //    </Link>\n              //   <Link href='/holiday/:id?type=\"update\"'>\n            \n              //     <Button variant=\"contained\" color=\"primary\" style={{ margin: '3 auto', display: \"flex\"}}>Switch to view</Button>\n                //   </Link> */}\n                \n              \n             </Grid>\n    \n       </Box>\n      </form>\n  </div>\n   )\n              \n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}