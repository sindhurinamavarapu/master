{"ast":null,"code":"var _jsxFileName = \"/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport moment from 'moment';\nimport { useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport EditIcon from '@material-ui/icons/Edit';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Link from \"@material-ui/core/Link\";\nimport { addTodo, readTodo, setHolidays } from '../slice/holidaySlice'; //import {setForID,setHolidays} from '../slice/holidaySlice';\n\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\"; // import moment from \"moment\";\n\nimport { holidayListSliceState, holidayListSliceId } from \"../slice/holidaySlice\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  root: {\n    justifyContent: 'center',\n    pb: '3'\n  },\n  inputLabel: {\n    paddingLeft: '30%'\n  },\n  textField: {\n    margin: '7'\n  }\n}));\nconst type = [{\n  label: 'Select'\n}, {\n  label: 'Optional'\n}, {\n  label: 'Fixed'\n}];\nconst location = [{\n  label: 'Select'\n}, {\n  label: 'All Locations'\n}, {\n  label: 'Bettendorf,IA'\n}, {\n  label: 'India'\n}];\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 1,\n  style: {\n    width: '65rem',\n    height: '35rem'\n  }\n};\n\nconst hType = code => {\n  let desc1 = \"Fixed\";\n\n  switch (code) {\n    case \"F\":\n      desc1 = \"Fixed\";\n      break;\n\n    case \"O\":\n      desc1 = \"Options\";\n      break;\n  }\n\n  return desc1;\n};\n\nconst location1 = code => {\n  let desc = \"All Locations\";\n\n  switch (code) {\n    case \"ALL\":\n      desc = \"All Locations\";\n      break;\n\n    case \"IND\":\n      desc = \"India\";\n      break;\n\n    case \"USA\":\n      desc = \"Bettendorf, IA\";\n      break;\n  }\n\n  return desc;\n};\n\nexport default function App() {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const holidays = useSelector(holidayListSliceState);\n  const holidaysListSliceId = useSelector(holidayListSliceId); //  console.log(\"formikvalues1234\",holidaysListSliceId.description);\n\n  let {\n    id,\n    actionType\n  } = useParams();\n  console.log(\"actionType\", actionType);\n  useEffect(() => {\n    if (actionType === \"view\") {\n      dispatch(readTodo(id));\n    }\n  }, [id, actionType]); //console.log(\"id\",holidays.HolidayId)\n\n  const formik = useFormik({\n    initialValues: {\n      id: \"\",\n      date: '',\n      location: '',\n      type: '',\n      description: '',\n      isComplete: false\n    },\n    validationSchema: Yup.object({\n      date: Yup.string().required(\"Required!\").nullable(),\n      location: Yup.string().required(\"Required!\").nullable(),\n      type: Yup.string().required(\"Required!\").nullable(),\n      description: Yup.string().required(\"Required!\").nullable()\n    }),\n    onSubmit: values => {\n      console.log(\"values\", values);\n      dispatch(addTodo(values)); // dispatch(readTodo(id));\n\n      console.log(\"formikvalues1234\", holidays.date); //  moment((formik.values.date,'YYYY/mm/dd').format('mm/dd/YYYY')),\n      // hType(formik.values.type),\n      // location1(formik.values.location),\n      //  )\n      //dispatch(setForId(id));\n\n      alert(JSON.stringify(values, null, 2));\n    }\n  }); //      const formikProps ={\n  //       intialvalues:intialValues\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        border: 1,\n        ...defaultProps,\n        px: 2,\n        pt: 5,\n        pb: 4,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"Holiday Id\",\n              margin: \"dense\",\n              varient: \"outlined\",\n              className: classes.inputLabel,\n              children: \"Holiday Id:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"HolidayId\",\n              id: \"outlined-full-width\",\n              value: \"#\",\n              style: {\n                margin: 1\n              },\n              value: \"#\" //value={holidaysListSliceId.HolidayId}\n              ,\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"Date\",\n              className: classes.inputLabel,\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"date\",\n              name: \"date\",\n              type: \"date\",\n              onChange: formik.handleChange //value={formik.values.date}\n              ,\n              value: moment(holidaysListSliceId.date, 'MM-DD-YYYY').format('YYYY-MM-DD'),\n              style: {\n                margin: 1\n              },\n              format: \"MM/dd/yyyy\",\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 30\n            }, this), formik.errors.date && formik.touched.date && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"location\",\n              className: classes.inputLabel,\n              children: \"Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"location\",\n              name: \"location\",\n              type: \"text\",\n              onChange: formik.handleChange //value={formik.values.location}\n              ,\n              select: true //value= {location1(holidaysListSliceId.location)}\n              ,\n              SelectProps: {\n                native: true\n              },\n              style: {\n                marginRight: 1\n              },\n              variant: \"filled\",\n              fullWidth: true,\n              children: location.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 35\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 43\n            }, this), formik.errors.location && formik.touched.location && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.location\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"type\",\n              className: classes.inputLabel,\n              children: \"Holiday Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"type\",\n              name: \"type\",\n              type: \"text\",\n              onChange: formik.handleChange //value={formik.values.type}\n              ,\n              select: true,\n              style: {\n                marginRight: 1\n              },\n              value: hType(holidaysListSliceId.type),\n              SelectProps: {\n                native: true\n              },\n              variant: \"filled\",\n              fullWidth: true,\n              children: type.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.label\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 35\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 31\n            }, this), formik.errors.type && formik.touched.type && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            children: /*#__PURE__*/_jsxDEV(InputLabel, {\n              htmlFor: \"description\",\n              className: classes.inputLabel,\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 10,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"description\",\n              name: \"description\",\n              type: \"text\",\n              onChange: formik.handleChange // values={formik.values.description}\n              ,\n              value: holidaysListSliceId.description,\n              style: {\n                marginRight: 1\n              },\n              fullWidth: true,\n              margin: \"normal\",\n              InputLabelProps: {\n                shrink: true\n              },\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 31\n            }, this), formik.errors.description && formik.touched.description && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: formik.errors.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 12,\n            md: 4,\n            lg: 4,\n            style: {\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 31\n            }, this), actionType !== \"view\" ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: classes.root,\n              style: {\n                margin: '1 auto',\n                display: \"flex\"\n              },\n              type: \"submit\",\n              startIcon: /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 46\n              }, this) //onClick={()=>{history.push(\"/update/${id}\")}}\n              ,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 45\n            }, this), actionType === \"view\" ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              style: {\n                margin: '1 auto',\n                display: \"flex\"\n              },\n              color: \"primary\",\n              className: classes.root,\n              startIcon: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 45\n              }, this) //onClick={()=>{history.push(\"/update/${id}\")}}\n              ,\n              children: \"Switch To Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 31\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 46\n            }, this), actionType !== \"view\" && actionType !== \"create\" ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              className: classes.root,\n              startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 45\n              }, this),\n              href: \"/\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 34\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 45\n            }, this), actionType !== \"view\" && actionType !== \"create\" ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              style: {\n                margin: '1 auto',\n                display: \"flex\"\n              },\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 43\n              }, this),\n              className: classes.root //onClick={()=>{history.push(\"/view/${id}\")}}\n              ,\n              children: \"Switch To View\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 32\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 32\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              style: {\n                margin: '1 auto',\n                display: \"flex\"\n              },\n              color: \"primary\",\n              className: classes.root,\n              children: \"Goto:Holidays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dZ86N2qKg+4zd27EWLpA8MG/ve4=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useParams, useFormik];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sindhurin/development/quadacademy/task-11B/src/component/HolidayPage.js"],"names":["React","useEffect","useState","useFormik","moment","useParams","Yup","makeStyles","Grid","Box","TextField","InputLabel","Button","SaveIcon","EditIcon","VisibilityIcon","Link","addTodo","readTodo","setHolidays","useDispatch","useSelector","holidayListSliceState","holidayListSliceId","DeleteIcon","useHistory","axios","useStyles","theme","button","margin","spacing","root","justifyContent","pb","inputLabel","paddingLeft","textField","type","label","location","defaultProps","bgcolor","m","border","style","width","height","hType","code","desc1","location1","desc","App","classes","dispatch","holidays","holidaysListSliceId","id","actionType","console","log","formik","initialValues","date","description","isComplete","validationSchema","object","string","required","nullable","onSubmit","values","alert","JSON","stringify","handleSubmit","shrink","handleChange","format","errors","touched","native","marginRight","map","option","value","textAlign","display"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from \"react\";\nimport { useFormik} from \"formik\";\nimport moment from 'moment';\n import {useParams} from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { makeStyles } from '@material-ui/core';\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport EditIcon from '@material-ui/icons/Edit';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport Link from \"@material-ui/core/Link\";\nimport {addTodo, readTodo, setHolidays} from '../slice/holidaySlice';\n//import {setForID,setHolidays} from '../slice/holidaySlice';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n// import moment from \"moment\";\nimport { holidayListSliceState,holidayListSliceId} from \"../slice/holidaySlice\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {useHistory} from \"react-router-dom\";\nimport axios from \"axios\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n    \n  },\n  root: {\n    justifyContent: 'center',\n    pb: '3'\n  },\n  inputLabel: {\n    paddingLeft: '30%',    \n  },\n  textField: {\n    margin: '7'\n  }\n}))\nconst type = [\n  {\n    label:'Select',\n  },\n  {\n\n    label: 'Optional',\n  },\n  {\n\n    label: 'Fixed',\n  },\n]\nconst location = [\n  {\n    label:'Select',\n  },\n  {\n    label: 'All Locations'\n  },\n  {\n    label: 'Bettendorf,IA'\n  },\n  {\n    label: 'India'\n  }\n]\nconst defaultProps = {\n  bgcolor: 'background.paper',\n  m: 1,\n  border: 1,\n  style: { width: '65rem', height: '35rem' },\n};\nconst hType =(code) =>{\n  let desc1=\"Fixed\"\n      \n  switch (code) {\n    case \"F\":\n        desc1=\"Fixed\"\n        break;\n     case \"O\":\n         desc1 =\"Options\"\n         break;     \n    }\n  return desc1;\n}\n\nconst location1 = (code) =>{\n  let desc=  \"All Locations\";\n\n  switch (code) {\n     case \"ALL\":\n         desc =\"All Locations\"\n         break;\n      case \"IND\":\n          desc =\"India\"\n          break;  \n      case \"USA\":\n         desc =\"Bettendorf, IA\"\n         break;\n       }\n  return desc;\n}\n\nexport default function App() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n   const holidays = useSelector(holidayListSliceState);\n \n   const holidaysListSliceId=useSelector(holidayListSliceId);\n  //  console.log(\"formikvalues1234\",holidaysListSliceId.description);\n    \n    let  {id ,actionType}= useParams();\n    console.log(\"actionType\",actionType);\n\n \n    useEffect(()=>{\n     if(actionType === \"view\"){\n    dispatch(readTodo(id))\n\n     }\n     \n  },[id,actionType])\n //console.log(\"id\",holidays.HolidayId)\n  \n  const formik = useFormik({\n   initialValues: {\n     id:\"\",\n      date:'',\n      location:'',\n      type:'',\n      description:'',\n      isComplete:false\n     \n    },\n   validationSchema: Yup.object({\n      date:Yup.string().required(\"Required!\").nullable(),\n      location:Yup.string().required(\"Required!\").nullable(),\n      type:Yup.string().required(\"Required!\").nullable(),\n      description:Yup.string().required(\"Required!\").nullable(),\n    }),\n   \n    onSubmit:values => {\n    \n      console.log(\"values\",values);\n         dispatch(addTodo(values));\n          // dispatch(readTodo(id));\n        console.log(\"formikvalues1234\",holidays.date)\n                //  moment((formik.values.date,'YYYY/mm/dd').format('mm/dd/YYYY')),\n                // hType(formik.values.type),\n                // location1(formik.values.location),\n        //  )\n         //dispatch(setForId(id));\n     \n       alert(JSON.stringify(values, null, 2));\n      \n     }})\n//      const formikProps ={\n//       intialvalues:intialValues\n// }\n  return (\n    <div className=\"App\">\n    <form onSubmit={formik.handleSubmit}>\n                <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n                          <Grid container spacing={3}>\n                          \n                            <Grid item xs={2}>\n                              <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n                            </Grid>\n                           \n                            <Grid item xs={10}>\n                            \n                              <TextField\n                              name=\"HolidayId\"\n                                id=\"outlined-full-width\"\n                                value=\"#\"\n                                style={{ margin: 1 }}\n                                value=\"#\"\n                                //value={holidaysListSliceId.HolidayId}\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                  shrink: true,\n                                }}\n                                variant=\"outlined\"\n                              />\n                            </Grid> \n                            \n                            <Grid item xs={2}>\n                              <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n                            </Grid>\n                            <Grid item xs={10}>\n                             <TextField\n                              id=\"date\"\n                              name=\"date\"\n                              type=\"date\"\n                              onChange={formik.handleChange}\n                              //value={formik.values.date}\n                              value={moment(holidaysListSliceId.date,'MM-DD-YYYY').format('YYYY-MM-DD')}\n                              style={{ margin: 1 }}\n                              format=\"MM/dd/yyyy\"\n                              fullWidth\n                              margin=\"normal\"\n                              InputLabelProps={{\n                                shrink: true,\n                              }}\n                              variant=\"outlined\"\n                            />\n                            {formik.errors.date && formik.touched.date && (\n                              <p>{formik.errors.date}</p>\n                            )}\n                           </Grid>\n                            <Grid item xs={2}>\n                              <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n                            </Grid>\n                            <Grid item xs={10}>\n                              <TextField\n                                id=\"location\"\n                                name=\"location\"\n                                type=\"text\"\n                               onChange={formik.handleChange}\n                               //value={formik.values.location}\n                                select\n                                //value= {location1(holidaysListSliceId.location)}\n                                SelectProps={{\n                                  native: true,\n                                }}\n                                style={{ marginRight: 1 }}\n                                variant=\"filled\"\n                                fullWidth\n                                \n                              >\n                                {location.map((option) => (\n                                  <option key={option.value} value={option.value}>\n                                    {option.label}\n                                  </option>\n                                ))}\n                              \n                              </TextField><br></br>\n                              {formik.errors.location && formik.touched.location && (\n                                <p>{formik.errors.location}</p>\n                              )}\n                            </Grid>\n                            <Grid item xs={2}>\n                              <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n                            </Grid>\n                            <Grid item xs={10}>\n                              <TextField\n                                id=\"type\"\n                                name=\"type\"\n                                type=\"text\"\n                               onChange={formik.handleChange}\n                               //value={formik.values.type}\n                                select\n                                style={{ marginRight: 1 }}\n                                value={hType(holidaysListSliceId.type)}\n                                SelectProps={{\n                                  native: true,\n                                }}\n                                variant=\"filled\"\n                                fullWidth\n                                \n                              >\n                                {type.map((option) => (\n                                  <option key={option.value} value={option.value}>\n                                    {option.label}\n                                  </option>\n                                ))}\n                                \n                              </TextField>\n                              {formik.errors.type && formik.touched.type&& (\n                                <p>{formik.errors.type}</p>\n                              )}\n                            </Grid>\n                            <Grid item xs={2}>\n                              <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n                            </Grid>\n                            <Grid item xs={10}>\n                              <TextField\n                                id=\"description\"\n                                name=\"description\"\n                                type=\"text\"\n                                onChange={formik.handleChange}\n                               // values={formik.values.description}\n                                \n                                 value={holidaysListSliceId.description}\n                                style={{ marginRight: 1 }}\n                                fullWidth\n                                margin=\"normal\"\n                                InputLabelProps={{\n                                  shrink: true,\n                                }}\n                                variant=\"outlined\"\n                              \n                              />\n                              {formik.errors.description && formik.touched.description && (\n                                <p>{formik.errors.description}</p>\n                              )}\n                            </Grid>\n                \n                            <Grid item xs={12} sm={12} md={4} lg={4}\n                              style={{\n                                textAlign: 'center'\n                              }}\n                            >\n\n        {/* <form  onSubmit={formik.handleSubmit} >\n           \n        //         <Box display=\"flex\" justifyContent=\"center\" border={1} {...defaultProps}  px={2} pt={5} pb={4}>\n        //                   <Grid container spacing={3}>\n                          \n        //                     <Grid item xs={2}>\n        //                       <InputLabel htmlFor=\"Holiday Id\" margin=\"dense\" varient=\"outlined\" className={classes.inputLabel} >Holiday Id:</InputLabel>\n        //                     </Grid>\n        //                     <Grid item xs={10}>\n        //                       <TextField\n        //                       name=\"HolidayId\"\n        //                         id=\"outlined-full-width\"\n        //                         placeholder=\"#\"\n        //                        value={holidaysListSliceId.HolidayId}\n        //                        onChange={formik.handleChange}\n                          \n        //                         style={{ margin: 1 }}\n                              \n        //                         fullWidth\n        //                         margin=\"normal\"\n        //                         InputLabelProps={{\n        //                           shrink: true,\n        //                         }}\n        //                         variant=\"outlined\"\n        //                         disabled\n        //                       />\n        //                       {formik.errors.HolidayId && formik.touched.HolidayId && (\n        //                         <p>{formik.errors.HolidayId}</p>\n        //                       )}\n        //                     </Grid>\n                \n        //                     <Grid item xs={2}>\n        //                       <InputLabel htmlFor=\"Date\" className={classes.inputLabel} >Date:</InputLabel>\n        //                     </Grid>\n        //                     <Grid item xs={10}>\n        //                      <TextField\n        //                       id=\"date\"\n        //                       name=\"date\"\n        //                     type=\"date\"\n                          \n        //                        value={moment(holidaysListSliceId.date,'MM-DD-YYYY').format('YYYY-MM-DD')}\n        //                        //value={moment(holidaysListSliceId.date,'yyyy-mm-dd').format('mm-dd-yyyy')}\n        //                       onChange={formik.handleChange}\n                        \n        //                      style={{ margin: 1 }}\n        //                      dateFormat=\"MM/DD/YYYY\"\n        //                       fullWidth\n        //                       margin=\"normal\"\n        //                       InputLabelProps={{\n        //                         shrink: true,\n        //                       }}\n        //                       variant=\"outlined\"\n        //                     />\n                            \n        //                     {formik.errors.date && formik.touched.date && (\n        //                       <p>{formik.errors.date}</p>\n        //                     )}\n        //                    </Grid>\n        //                     <Grid item xs={2}>\n        //                       <InputLabel htmlFor=\"location\" className={classes.inputLabel} >Location:</InputLabel>\n        //                     </Grid>\n        //                     <Grid item xs={10}>\n        //                       <TextField\n        //                         id=\"location\"\n        //                         name=\"location\"\n        //                         type=\"text\"\n                              \n        //                           value= {location1(holidaysListSliceId.location)}\n        //                          onChange={formik.handleChange}\n                         \n        //                         select\n                             \n        //                         SelectProps={{\n        //                           native: true,\n        //                         }}\n        //                         style={{ marginRight: 1 }}\n        //                         variant=\"filled\"\n        //                         fullWidth\n                                \n        //                       >\n        //                         {location.map((option) => (\n        //                           <option key={option.value} value={option.value}>\n        //                             {option.label}\n        //                           </option>\n        //                         ))}\n                              \n        //                       </TextField><br></br>\n        //                       {formik.errors.location && formik.touched.location && (\n        //                         <p>{formik.errors.location}</p>\n        //                       )}\n        //                     </Grid>\n        //                     <Grid item xs={2}>\n        //                       <InputLabel htmlFor=\"type\" className={classes.inputLabel} >Holiday Type:</InputLabel>\n        //                     </Grid>\n        //                     <Grid item xs={10}>\n        //                       <TextField\n        //                         id=\"type\"\n        //                         name=\"type\"\n        //                         type=\"text\"\n                               \n        //                        value={hType(holidaysListSliceId.type)}\n        //                       onChange={formik.handleChange}\n                           \n        //                         select\n        //                         style={{ marginRight: 1 }}\n                             \n        //                         SelectProps={{\n        //                           native: true,\n        //                         }}\n        //                         variant=\"filled\"\n        //                         fullWidth\n                                \n        //                       >\n        //                         {type.map((option) => (\n        //                           <option key={option.value} value={option.value}>\n        //                             {option.label}\n        //                           </option>\n        //                         ))}\n                                \n        //                       </TextField>\n        //                       {formik.errors.type && formik.touched.type&& (\n        //                         <p>{formik.errors.type}</p>\n        //                       )}\n        //                     </Grid>\n        //                     <Grid item xs={2}>\n        //                       <InputLabel htmlFor=\"description\" className={classes.inputLabel} >Description:</InputLabel>\n        //                     </Grid>\n        //                     <Grid item xs={10}>\n        //                       <TextField\n        //                         id=\"description\"\n        //                         name=\"description\"\n        //                         type=\"text\"\n        //                         onChange={formik.handleChange}\n        //                       value={holidaysListSliceId.description}\n                              \n        //                         style={{ marginRight: 1 }}\n        //                         fullWidth\n        //                         margin=\"normal\"\n        //                         InputLabelProps={{\n        //                           shrink: true,\n        //                         }}\n        //                         variant=\"outlined\"\n                              \n        //                       />\n        //                       {formik.errors.description && formik.touched.description && (\n        //                         <p>{formik.errors.description}</p>\n        //                       )}\n        //                     </Grid>\n                \n        //                     <Grid item xs={12} sm={12} md={4} lg={4}\n        //                       style={{\n        //                         textAlign: 'center'\n  //                       }}*/}\n                            \n                              <Button>\n                \n                              </Button>\n                             \n                              {(actionType !== \"view\") ?\n                              <Button\n                                  variant=\"contained\"\n                                  color=\"primary\"\n                                  className={classes.root}\n                                  style={{ margin: '1 auto', display: \"flex\" }}\n                                  type=\"submit\"\n                                  startIcon={<SaveIcon />}\n                                 //onClick={()=>{history.push(\"/update/${id}\")}}\n                                >\n                                  Save\n                                </Button> : <div>\n                                  </div>\n                              }\n                           \n                          {(actionType === \"view\") ?\n                          \n                              <Button variant=\"outlined\" \n                                 style={{ margin: '1 auto', display: \"flex\" }}\n                                 color=\"primary\"\n                                 className={classes.root}\n                                 startIcon={<EditIcon />}\n                                 //onClick={()=>{history.push(\"/update/${id}\")}}\n                                 >Switch To Update\n                                 </Button> : <div>\n                                 </div>\n                            }\n                           \n                            {(actionType !== \"view\") && (actionType !== \"create\")?\n                                 <Button\n                                 variant=\"contained\"\n                                 color=\"secondary\"\n                                 className={classes.root}\n                                 startIcon={<DeleteIcon />}\n                                  href=\"/\"\n                                   >\n                                  Delete\n                                </Button> : <div></div>\n                               }\n                      \n\n                               {(actionType !==\"view\") && (actionType !==\"create\") ?\n                               <Button variant=\"outlined\" \n                               style={{ margin: '1 auto', display: \"flex\" }}\n                               color=\"primary\"\n                               startIcon={<VisibilityIcon />}\n                               className={classes.root}\n                               //onClick={()=>{history.push(\"/view/${id}\")}}\n                               >Switch To View\n                               </Button>\n                              \n                              :<div>\n                              </div>\n                              }\n                          \n                      \n                              <Button variant=\"outlined\" \n                                 style={{ margin: '1 auto', display: \"flex\" }}\n                                 color=\"primary\"\n                                 className={classes.root}\n                                 >Goto:Holidays\n                                 </Button>\n                      \n                            \n                           </Grid>\n                           </Grid>\n                 </Box>\n           </form>\n        </div>\n               \n      \n  )}\n"]},"metadata":{},"sourceType":"module"}