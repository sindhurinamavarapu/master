{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport moment from \"moment\"; //slice\n\nconst holidaySlice = createSlice({\n  name: \"holidayList\",\n  initialState: {\n    holidayData: []\n  },\n  reducers: {\n    getHolidays(state, action) {\n      state.holidayData = action.payload;\n    },\n\n    addTodo(state, action) {\n      state.holidayData = action.payload;\n    }\n\n  }\n});\nexport const {\n  getHolidays\n} = holidaySlice.actions; //Actions\n\nexport const fetchUsers = year => async dispatch => {\n  if (typeof year === \"undefined\") {\n    year = moment().year();\n  }\n\n  axios.get(`http://localhost:4000/holiday/year/${year}`).then(res => {\n    dispatch(getHolidays(res.data));\n  });\n}; //post \n\nexport const addTodo = holiday => async dispatch => {\n  axios.post(`http://localhost:4000/${holiday}`).then(res => {\n    dispatch(addTodo(res.data));\n  });\n}; //read the data\n\nexport const readTodo = id => async dispatch => {\n  axios.get(`http://localhost:4000/holiday/:${id}`).then(res => {\n    dispatch(readTodo(res.data));\n  });\n}; //update\n\nexport const updateTodo = id => async dispatch => {\n  axios.put(`http://localhost:4000/holiday/:${id}`).then(res => {\n    dispatch(updateTodo(res.data));\n  });\n}; //delete\n\nexport const deleteTodo = id => async dispatch => {\n  axios.delete(`http://localhost:4000/holiday/;${id}`).then(res => {\n    dispatch(deleteTodo(res.data));\n  });\n};\nexport const holidayListSliceState = state => state.holidaySlice.holidayData;\nexport default holidaySlice.reducer;","map":{"version":3,"sources":["/Users/sindhurin/development/quadacademy/task-11B/src/slice/holidaySlice.js"],"names":["createSlice","axios","moment","holidaySlice","name","initialState","holidayData","reducers","getHolidays","state","action","payload","addTodo","actions","fetchUsers","year","dispatch","get","then","res","data","holiday","post","readTodo","id","updateTodo","put","deleteTodo","delete","holidayListSliceState","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,MAAMC,YAAY,GAAGH,WAAW,CAAC;AAC7BI,EAAAA,IAAI,EAAE,aADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,WAAW,EAAE;AADH,GAFe;AAK7BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACC,OAA3B;AACH,KAHK;;AAINC,IAAAA,OAAO,CAACH,KAAD,EAAOC,MAAP,EAAe;AAClBD,MAAAA,KAAK,CAACH,WAAN,GAAoBI,MAAM,CAACC,OAA3B;AACH;;AANK;AALmB,CAAD,CAAhC;AAcA,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAiBL,YAAY,CAACU,OAApC,C,CAGP;;AACA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACpD,MAAI,OAAOD,IAAP,KAAgB,WAApB,EAAiC;AAC7BA,IAAAA,IAAI,GAAGb,MAAM,GAAGa,IAAT,EAAP;AACH;;AACDd,EAAAA,KAAK,CAACgB,GAAN,CAAW,sCAAqCF,IAAK,EAArD,EAAwDG,IAAxD,CAA8DC,GAAD,IAAS;AAClEH,IAAAA,QAAQ,CAACR,WAAW,CAACW,GAAG,CAACC,IAAL,CAAZ,CAAR;AACH,GAFD;AAIH,CARM,C,CASP;;AACC,OAAO,MAAMR,OAAO,GAAGS,OAAD,IAAa,MAAML,QAAN,IAAmB;AAE/Cf,EAAAA,KAAK,CAACqB,IAAN,CAAY,yBAAwBD,OAAQ,EAA5C,EAA+CH,IAA/C,CAAqDC,GAAD,IAAQ;AACxDH,IAAAA,QAAQ,CAACJ,OAAO,CAACO,GAAG,CAACC,IAAL,CAAR,CAAR;AACH,GAFD;AAIH,CANG,C,CAQR;;AACA,OAAO,MAAMG,QAAQ,GAAGC,EAAD,IAAO,MAAMR,QAAN,IAAmB;AAC7Cf,EAAAA,KAAK,CAACgB,GAAN,CAAW,kCAAiCO,EAAG,EAA/C,EAAkDN,IAAlD,CAAwDC,GAAD,IAAS;AAC5DH,IAAAA,QAAQ,CAACO,QAAQ,CAACJ,GAAG,CAACC,IAAL,CAAT,CAAR;AACH,GAFD;AAGH,CAJM,C,CAKN;;AACA,OAAO,MAAMK,UAAU,GAAGD,EAAD,IAAO,MAAMR,QAAN,IAAkB;AAC9Cf,EAAAA,KAAK,CAACyB,GAAN,CAAW,kCAAiCF,EAAG,EAA/C,EAAkDN,IAAlD,CAAwDC,GAAD,IAAQ;AAC3DH,IAAAA,QAAQ,CAACS,UAAU,CAACN,GAAG,CAACC,IAAL,CAAX,CAAR;AACH,GAFD;AAGH,CAJM,C,CAKP;;AACA,OAAO,MAAMO,UAAU,GAAGH,EAAD,IAAO,MAAMR,QAAN,IAAoB;AAChDf,EAAAA,KAAK,CAAC2B,MAAN,CAAc,kCAAiCJ,EAAG,EAAlD,EAAqDN,IAArD,CAA2DC,GAAD,IAAQ;AAC9DH,IAAAA,QAAQ,CAACW,UAAU,CAACR,GAAG,CAACC,IAAL,CAAX,CAAR;AACH,GAFD;AAGH,CAJM;AAMR,OAAO,MAAMS,qBAAqB,GAAIpB,KAAD,IAAWA,KAAK,CAACN,YAAN,CAAmBG,WAA5D;AACP,eAAeH,YAAY,CAAC2B,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\n//slice\nconst holidaySlice = createSlice({\n    name: \"holidayList\",\n    initialState: {\n        holidayData: [],\n    },\n    reducers: {\n        getHolidays(state, action) {\n            state.holidayData = action.payload;\n        },\n        addTodo(state,action) {\n            state.holidayData = action.payload;\n        }\n    },\n});\nexport const { getHolidays} = holidaySlice.actions;\n\n\n//Actions\nexport const fetchUsers = (year) => async (dispatch) => {\n    if (typeof year === \"undefined\") {\n        year = moment().year();\n    }\n    axios.get(`http://localhost:4000/holiday/year/${year}`).then((res) => {\n        dispatch(getHolidays(res.data));\n    });\n    \n};\n//post \n export const addTodo =(holiday) => async(dispatch) => {\n   \n        axios.post(`http://localhost:4000/${holiday}`).then((res) =>{\n            dispatch(addTodo(res.data))\n        })\n       \n    };\n\n//read the data\nexport const readTodo =(id) =>async(dispatch) => {\n    axios.get(`http://localhost:4000/holiday/:${id}`).then((res) => {\n        dispatch(readTodo(res.data))\n    })\n}\n //update\n export const updateTodo =(id) =>async(dispatch) =>{\n     axios.put(`http://localhost:4000/holiday/:${id}`).then((res) =>{\n         dispatch(updateTodo(res.data))\n     })\n } \n //delete\n export const deleteTodo =(id) =>async(dispatch) =>  {\n     axios.delete(`http://localhost:4000/holiday/;${id}`).then((res) =>{\n         dispatch(deleteTodo(res.data))\n     })\n }\n\nexport const holidayListSliceState = (state) => state.holidaySlice.holidayData;\nexport default holidaySlice.reducer;\n"]},"metadata":{},"sourceType":"module"}